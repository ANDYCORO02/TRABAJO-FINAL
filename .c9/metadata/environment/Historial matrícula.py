{"changed":true,"filter":false,"title":"Historial matrícula.py","tooltip":"/Historial matrícula.py","value":"import sqlite3\nfrom random import randint\n\n# Conexión a la base de datos (se crea si no existe)\nconn = sqlite3.connect(\"matriculas.db\")\ncursor = conn.cursor()\n\n# Crear la tabla si no existe\ncursor.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS alumnos (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    nombre TEXT,\n    curso TEXT,\n    sede TEXT,\n    horario TEXT,\n    codigo_pago TEXT\n)\n\"\"\")\n\n# Lista para guardar en memoria también (opcional)\nalumnos_matriculados = []\n\n# Bucle principal\nwhile True:\n    print(\"\\n--- MATRÍCULA WETALK CIBERTEC ---\")\n\n    # Entrada de datos\n    nombre = input(\"Nombre del alumno: \").strip()\n    estado = input(\"Estado del alumno (activo/inactivo): \").strip().lower()\n    deuda = input(\"¿Tiene deuda pendiente? (sí/no): \").strip().lower()\n\n    # Validación\n    if estado == \"activo\" and deuda == \"no\":\n        print(\"Alumno apto para matricularse.\")\n\n        # Selección de curso\n        curso = input(\"Ingrese el curso (Inglés 0 / Inglés 1 / Inglés 2 / Inglés 3 / Inglés 4 / Inglés 5): \").strip()\n        sede = input(\"Ingrese la sede (Virtual): \").strip()\n        horario = input(\"Ingrese el horario (mañana / tarde / noche): \").strip().lower()\n\n        # Generar código de pago simple\n        codigo_pago = f\"PAGO{nombre[:3].upper()}{randint(100,999)}\"\n\n        # Mostrar factura simulada\n        print(\"\\n--- FACTURA ---\")\n        print(\"Alumno:\", nombre)\n        print(\"Curso:\", curso)\n        print(\"Sede:\", sede)\n        print(\"Horario:\", horario)\n        print(\"Código de pago:\", codigo_pago)\n        print(\"--------------------\")\n\n        # Guardar en memoria (opcional)\n        alumnos_matriculados.append({\n            \"nombre\": nombre,\n            \"curso\": curso,\n            \"sede\": sede,\n            \"horario\": horario,\n            \"codigo_pago\": codigo_pago\n        })\n\n        # Guardar en la base de datos\n        cursor.execute(\"\"\"\n        INSERT INTO alumnos (nombre, curso, sede, horario, codigo_pago)\n        VALUES (?, ?, ?, ?, ?)\n        \"\"\", (nombre, curso, sede, horario, codigo_pago))\n        conn.commit()\n\n    else:\n        print(\"El alumno no puede matricularse por tener deudas pendientes o estar inactivo.\")\n\n    # Preguntar si desea registrar otro alumno\n    continuar = input(\"¿Desea registrar otro alumno? (sí/no): \").strip().lower()\n    if continuar != \"sí\":\n        break\n\n# Mostrar lista final desde la base de datos\nprint(\"\\nLista de alumnos matriculados:\")\ncursor.execute(\"SELECT nombre, curso, sede, horario, codigo_pago FROM alumnos\")\nfor row in cursor.fetchall():\n    print(f\"- {row[0]} ({row[1]}, {row[2]}, {row[3]}, Código: {row[4]})\")\n\n# Cerrar conexión\nconn.close()\n","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":84,"column":0},"action":"insert","lines":["import sqlite3","from random import randint","","# Conexión a la base de datos (se crea si no existe)","conn = sqlite3.connect(\"matriculas.db\")","cursor = conn.cursor()","","# Crear la tabla si no existe","cursor.execute(\"\"\"","CREATE TABLE IF NOT EXISTS alumnos (","    id INTEGER PRIMARY KEY AUTOINCREMENT,","    nombre TEXT,","    curso TEXT,","    sede TEXT,","    horario TEXT,","    codigo_pago TEXT",")","\"\"\")","","# Lista para guardar en memoria también (opcional)","alumnos_matriculados = []","","# Bucle principal","while True:","    print(\"\\n--- MATRÍCULA WETALK CIBERTEC ---\")","","    # Entrada de datos","    nombre = input(\"Nombre del alumno: \").strip()","    estado = input(\"Estado del alumno (activo/inactivo): \").strip().lower()","    deuda = input(\"¿Tiene deuda pendiente? (sí/no): \").strip().lower()","","    # Validación","    if estado == \"activo\" and deuda == \"no\":","        print(\"Alumno apto para matricularse.\")","","        # Selección de curso","        curso = input(\"Ingrese el curso (Inglés 0 / Inglés 1 / Inglés 2 / Inglés 3 / Inglés 4 / Inglés 5): \").strip()","        sede = input(\"Ingrese la sede (Virtual): \").strip()","        horario = input(\"Ingrese el horario (mañana / tarde / noche): \").strip().lower()","","        # Generar código de pago simple","        codigo_pago = f\"PAGO{nombre[:3].upper()}{randint(100,999)}\"","","        # Mostrar factura simulada","        print(\"\\n--- FACTURA ---\")","        print(\"Alumno:\", nombre)","        print(\"Curso:\", curso)","        print(\"Sede:\", sede)","        print(\"Horario:\", horario)","        print(\"Código de pago:\", codigo_pago)","        print(\"--------------------\")","","        # Guardar en memoria (opcional)","        alumnos_matriculados.append({","            \"nombre\": nombre,","            \"curso\": curso,","            \"sede\": sede,","            \"horario\": horario,","            \"codigo_pago\": codigo_pago","        })","","        # Guardar en la base de datos","        cursor.execute(\"\"\"","        INSERT INTO alumnos (nombre, curso, sede, horario, codigo_pago)","        VALUES (?, ?, ?, ?, ?)","        \"\"\", (nombre, curso, sede, horario, codigo_pago))","        conn.commit()","","    else:","        print(\"El alumno no puede matricularse por tener deudas pendientes o estar inactivo.\")","","    # Preguntar si desea registrar otro alumno","    continuar = input(\"¿Desea registrar otro alumno? (sí/no): \").strip().lower()","    if continuar != \"sí\":","        break","","# Mostrar lista final desde la base de datos","print(\"\\nLista de alumnos matriculados:\")","cursor.execute(\"SELECT nombre, curso, sede, horario, codigo_pago FROM alumnos\")","for row in cursor.fetchall():","    print(f\"- {row[0]} ({row[1]}, {row[2]}, {row[3]}, Código: {row[4]})\")","","# Cerrar conexión","conn.close()",""],"id":2}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":39},"action":"remove","lines":["conn = sqlite3.connect(\"matriculas.db\")"],"id":3},{"start":{"row":4,"column":0},"end":{"row":4,"column":1},"action":"insert","lines":["h"]},{"start":{"row":4,"column":1},"end":{"row":4,"column":2},"action":"insert","lines":["i"]},{"start":{"row":4,"column":2},"end":{"row":4,"column":3},"action":"insert","lines":["s"]},{"start":{"row":4,"column":3},"end":{"row":4,"column":4},"action":"insert","lines":["t"]},{"start":{"row":4,"column":4},"end":{"row":4,"column":5},"action":"insert","lines":["o"]},{"start":{"row":4,"column":5},"end":{"row":4,"column":6},"action":"insert","lines":["r"]},{"start":{"row":4,"column":6},"end":{"row":4,"column":7},"action":"insert","lines":["y"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":11,"column":16},"end":{"row":11,"column":16},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1747789674575}